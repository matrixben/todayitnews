表结构:
news(news_id,title,tag,subtitle,publish_date,source_url)

先使用spring单体应用构建，后期再把爬虫和定时任务提取出来用其他方式实现
celery;消息队列

超媒体:
HAL: spring HATEOS

websocket in spring: https://spring.io/guides/gs/messaging-stomp-websocket/
前端模板 thymeleaf: https://spring.io/guides/gs/serving-web-content/

stomp

TODO: 抽出一个baseCrawler类
处理scheduledCrawler的异常

<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <executions>
            <execution>
              <id>unpack</id>
              <phase>package</phase>
              <goals>
                <goal>unpack</goal>
              </goals>
              <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>${project.artifactId}</artifactId>
                    <version>${project.version}</version>
                  </artifactItem>
                </artifactItems>
              </configuration>
            </execution>
          </executions>
        </plugin>

<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <transformers>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    <mainClass>jason.luo.App</mainClass>
                  </transformer>
                </transformers>
              </configuration>
            </execution>
          </executions>
        </plugin>